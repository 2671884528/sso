package com.gyg.handle;import com.google.gson.Gson;import com.gyg.config.security.Systemcode;import org.apache.commons.lang3.StringUtils;import org.slf4j.Logger;import org.slf4j.LoggerFactory;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.cloud.gateway.filter.GatewayFilterChain;import org.springframework.cloud.gateway.filter.GlobalFilter;import org.springframework.core.Ordered;import org.springframework.data.redis.core.StringRedisTemplate;import org.springframework.http.server.reactive.ServerHttpRequest;import org.springframework.http.server.reactive.ServerHttpResponse;import org.springframework.stereotype.Component;import org.springframework.web.server.ServerWebExchange;import reactor.core.publisher.Mono;/** * @author 郭永钢 */@Componentpublic class WebFilter implements GlobalFilter, Ordered {    @Autowired    StringRedisTemplate redisTemplate;    private static final Logger logger = LoggerFactory.getLogger(WebFilter.class);    private static final Gson gson = new Gson();    private static final String TokenNAME = "token";    private static final String AcceptPath = "login";    @Override    public Mono<Void> filter(ServerWebExchange exchange, GatewayFilterChain chain) {        ServerHttpRequest request = exchange.getRequest();        ServerHttpResponse response = exchange.getResponse();        String uri = request.getURI().getPath();        String token = request.getHeaders().get(TokenNAME).get(0);        String redisToken = redisTemplate.opsForValue().get(TokenNAME);        // 可以根据请求头过滤        logger.info("请求的uri：{},请求方式{}", uri, request.getMethodValue());        // 过滤登录界面，登录界面通过        if (uri.contains(AcceptPath)) {            return chain.filter(exchange);        }        // 过滤不包含token        if (StringUtils.isEmpty(token)) {            logger.info(Systemcode.UNAUTHORIZED.getMessage());            response.setComplete();        }        if (StringUtils.isBlank(token)) {            logger.info(Systemcode.UNAUTHORIZED.getMessage());            response.setComplete();        }        if (StringUtils.isEmpty(redisToken)) {            logger.info(Systemcode.UNAUTHORIZED.getMessage());            response.setComplete();        }        if (StringUtils.isBlank(redisToken)) {            logger.info(Systemcode.UNAUTHORIZED.getMessage());            response.setComplete();        }        if (!StringUtils.equals(token, redisToken)) {            logger.info(Systemcode.AccessTokenError.getMessage());            response.setComplete();        }        if (StringUtils.equals(token, redisToken)) {            // TODO判断token是否被盗用            logger.info("请求的主机地址：{}",request.getLocalAddress().toString());            return chain.filter(exchange);        }        return response.setComplete();    }    @Override    public int getOrder() {        return 0;    }}